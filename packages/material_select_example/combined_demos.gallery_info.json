[{"displayName":"Material Select","docs":[{"name":"MaterialSelectComponent","selector":"material-select","exportAs":null,"path":"angular_components/lib/material_select/material_select.dart","comment":"<p>Material Select is a container for selecting items from a collection,\nmarking selected options with a check icon.</p>\n<p>Options can be specified manually (in your template), or via a\n<code>SelectionOptions</code> instance. Options can be marked as selected via template\nor by checking against a selection model.</p>\n","inputs":[{"annotation":"Input","name":"componentRenderer","bindingAlias":null,"type":"(dynamic) → Type","comment":"","classPath":"angular_components/lib/material_select/material_select.dart","deprecated":true,"deprecatedMessage":"Use factoryRenderer instead it is more tree-shakable"},{"annotation":"Input","name":"disabled","bindingAlias":null,"type":"bool","comment":"<p>Whether the select should be shown as disabled.</p>\n<p>Defaults to false.</p>\n","classPath":"angular_components/lib/material_select/material_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"factoryRenderer","bindingAlias":null,"type":"(dynamic) → ComponentFactory<dynamic>","comment":"<p>Used to create a <code>ComponentFactory</code> that must override <code>RendersValue</code>\nfrom a given option allowing for a more expressive option.</p>\n","classPath":"angular_components/lib/material_select/material_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"itemRenderer","bindingAlias":null,"type":"(dynamic) → String","comment":"<p>A rendering function to render selection options to a String, if given a\n<code>value</code>.</p>\n","classPath":"angular_components/lib/material_select/material_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"options","bindingAlias":null,"type":"SelectionOptions<dynamic>","comment":"<p>The <code>SelectionOptions</code> instance providing options to render.</p>\n","classPath":"angular_components/lib/material_select/material_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"selection","bindingAlias":null,"type":"SelectionModel<dynamic>","comment":"<p>The <code>SelectionModel</code> for this container.</p>\n","classPath":"angular_components/lib/material_select/material_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"width","bindingAlias":null,"type":"dynamic","comment":"<p>The width of the rendered list, from 1 to 5.</p>\n","classPath":"angular_components/lib/material_select/material_select.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[]},{"name":"MaterialSelectItemComponent","selector":"material-select-item","exportAs":null,"path":"angular_components/lib/material_select/material_select_item.dart","comment":"<p>Material Select Item is a special kind of list item which can be selected.</p>\n<p>For accessibility, should be contained in an element with role=\"listbox\" and\naria-multiselectable set appropriately, unless <code>role</code> is set to something\nother than \"option\".</p>\n","inputs":[{"annotation":"Input","name":"closeOnActivate","bindingAlias":null,"type":"bool","comment":"<p>Whether to cause dropdown to be closed on activation.</p>\n<p>True by default.</p>\n","classPath":"angular_components/lib/material_select/material_select_item.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"componentRenderer","bindingAlias":null,"type":"(dynamic) → Type","comment":"","classPath":"angular_components/lib/material_select/material_select_item.dart","deprecated":true,"deprecatedMessage":"Use factoryrenderer instead as it will produce more tree-shakeable code."},{"annotation":"Input","name":"deselectOnActivate","bindingAlias":null,"type":"bool","comment":"<p>If true and selectOnActivate is true, triggering this item component will\ndeselect the currently selected <code>value</code> within the <code>selection</code>; if false,\ntriggering this component when <code>value</code> is selected will do nothing.</p>\n","classPath":"angular_components/lib/material_select/material_select_item.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"disabled","bindingAlias":null,"type":"bool","comment":"<p>Is the component disabled.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"factoryRenderer","bindingAlias":null,"type":"(dynamic) → ComponentFactory<dynamic>","comment":"<p>Returns a <code>ComponentFactory</code> for dynamic component loader to use to render\n an item.</p>\n","classPath":"angular_components/lib/material_select/material_select_item.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"hideCheckbox","bindingAlias":null,"type":"bool","comment":"<p>Whether to hide the checkbox.</p>\n<p>False by default.</p>\n","classPath":"angular_components/lib/material_select/material_select_item.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"isHidden","bindingAlias":null,"type":"bool","comment":"<p>Whether the item should be hidden.</p>\n<p>False by default.</p>\n","classPath":"angular_components/lib/material_select/material_select_item.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"itemRenderer","bindingAlias":null,"type":"(dynamic) → String","comment":"<p>A function to render an item as a String.</p>\n<p>If none is provided, no label is generated (labels can still be passed\nas content).</p>\n","classPath":"angular_components/lib/material_select/material_select_item.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"role","bindingAlias":null,"type":"String","comment":"<p>Role of this component used for a11y.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"selectOnActivate","bindingAlias":null,"type":"bool","comment":"<p>If true, triggering this item component will select the <code>value</code> within the\n<code>selection</code>; if false, triggering this item component will do nothing.</p>\n","classPath":"angular_components/lib/material_select/material_select_item.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"selected","bindingAlias":null,"type":"bool","comment":"<p>Manually mark items selected.</p>\n","classPath":"angular_components/lib/material_select/material_select_item.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"selection","bindingAlias":null,"type":"SelectionModel<dynamic>","comment":"<p>Selection model to update with changes.</p>\n","classPath":"angular_components/lib/material_select/material_select_item.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"tabbable","bindingAlias":null,"type":"bool","comment":"<p>Is the component tabbable.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"tabindex","bindingAlias":null,"type":"String","comment":"<p>The tab index of the component.</p>\n<p>The value is used if <code>tabbable</code> is <code>true</code> and <code>disabled</code> is <code>false</code>.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"useCheckMarks","bindingAlias":null,"type":"bool","comment":"<p>If true, check marks are used instead of checkboxes to indicate whether or\nnot the item is selected for multi-select items.</p>\n<p>This particular style is used in material menu dropdown for multi-select\nmenu item groups.</p>\n","classPath":"angular_components/lib/material_select/material_select_item.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"value","bindingAlias":null,"type":"dynamic","comment":"<p>The value this selection item represents.</p>\n<p>If the object implements <code>HasUIDisplayName</code>, it will render use\nthe <code>uiDisplayName</code> field as the label for the item. Otherwise, the label\nis only generated by this component if an <code>ItemRenderer</code> is provided\n(via the <code>itemRenderer</code> property).</p>\n","classPath":"angular_components/lib/material_select/material_select_item.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[{"annotation":"Output","name":"trigger","bindingAlias":null,"type":"Stream<UIEvent>","comment":"<p>Fired when the button is activated via click, tap, or key press.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null}]},{"name":"MaterialDropdownSelectComponent","selector":"material-dropdown-select","exportAs":null,"path":"angular_components/lib/material_select/material_dropdown_select.dart","comment":"<p>Material Dropdown Select is a button-triggered dropdown.</p>\n<p>The <code>material-dropdown-select</code> component combines the APIs of\n<code>material-select</code>, and <code>material-button-dropdown</code>.</p>\n<p>When used with a single selection model, the dropdown closes upon selection.\nWhen using a multi-selection model, the user must close the dropdown by\nclicking outside of it.</p>\n<p>Selection options may be declared manually by passing <code>material-select-item</code>\nelements. When using the declarative API, the <code>SelectionModel</code> and\n<code>SelectionOptions</code> are not injected, so marking the item as selected is not\nautomatic.</p>\n<p>If an <code>OptionGroup</code> is empty and has an <code>emptyLabel</code> defined, the dropdown\nwill include it with the other groups. If <code>emptyLabel</code> is not defined for\nan empty group it will not appear in the list.</p>\n<p>Supports async suggestions through the <code>ObserveAware</code> interface implemented\nby <code>SelectionOptions</code>.</p>\n<p>The material-select has a fixed max height and auto overflow. We can add a\nproperty for custom max height once there's a use case.</p>\n<p>See examples for usage.</p>\n<p><strong>Attributes:</strong></p><ul><li><code>buttonAriaRole</code> -- Aria label for the button icon.</li><li><code>popupClass</code> -- Class to be added to the dropdown popup so that the popup\ncan be styled in an encapsulated way. See <code>MaterialPopup</code> for\ndocumentation.</li></ul>\n","inputs":[{"annotation":"Input","name":"ariaActiveDescendant","bindingAlias":null,"type":"String","comment":"<p>The id of the active element of the dropdown.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"buttonAriaLabel","bindingAlias":null,"type":"String","comment":"<p>Aria label for the button.</p>\n","classPath":"angular_components/lib/mixins/button_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"buttonAriaLabelledBy","bindingAlias":null,"type":"String","comment":"<p>The id of an element that describes the selection in the dropdown button.</p>\n<p>For example, a text element that says \"results per page\" for a dropdown\nwith numerical options.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"buttonText","bindingAlias":null,"type":"String","comment":"<p>Text on the button.</p>\n","classPath":"angular_components/lib/mixins/button_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"componentRenderer","bindingAlias":null,"type":"(dynamic) → Type","comment":"","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":true,"deprecatedMessage":"Use factoryRenderer it allows for more tree-shakable code."},{"annotation":"Input","name":"constrainToViewport","bindingAlias":null,"type":"bool","comment":"<p>Whether to clamp the dropdown position so that it never goes offscreen.</p>\n","classPath":"angular_components/lib/mixins/material_dropdown_base.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"deselectLabel","bindingAlias":null,"type":"String","comment":"<p>Text label for select item that deselects the current selection.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"deselectOnActivate","bindingAlias":null,"type":"bool","comment":"<p> Whether to deselect a selected option on click or enter/space key.</p>\n<p>Single selection model only. Defaults to true.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"disabled","bindingAlias":null,"type":"bool","comment":"<p>Whether the button is disabled.</p>\n","classPath":"angular_components/lib/mixins/button_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"enforceSpaceConstraints","bindingAlias":null,"type":"bool","comment":"<p>Avoid rendering drop down offscreen.</p>\n","classPath":"angular_components/lib/mixins/material_dropdown_base.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"error","bindingAlias":null,"type":"String","comment":"<p>An error displayed below the dropdown button.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"factoryRenderer","bindingAlias":null,"type":"(dynamic) → ComponentFactory<dynamic>","comment":"<p>Function that returns a component factory to render the Item.</p>\n<p>The resulting component must implement RendersValue.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"icon","bindingAlias":null,"type":"Icon","comment":"<p>Icon to be used with the button. (Optional)</p>\n","classPath":"angular_components/lib/mixins/button_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"iconName","bindingAlias":null,"type":"String","comment":"<p>Icon to use for the button.</p>\n<p>See <code>MaterialIconComponent</code> for possible values.</p>\n","classPath":"angular_components/lib/mixins/button_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"itemRenderer","bindingAlias":null,"type":"(dynamic) → String","comment":"<p>Function to convert an option object to string.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"labelFactory","bindingAlias":null,"type":"(dynamic) → ComponentFactory<dynamic>","comment":"<p>Factory that returns a component to be used for rendering group labels.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"labelRenderer","bindingAlias":null,"type":"(dynamic) → Type","comment":"","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":true,"deprecatedMessage":"Use labelFactory instead it allows for better tree-shakable code."},{"annotation":"Input","name":"listAutoFocus","bindingAlias":null,"type":"bool","comment":"<p>Whether to focus the options list by default when the popup opens.</p>\n<p>Should be set to false when another element in the popup is focused on\nopen, e.g. a search box.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"options","bindingAlias":null,"type":"SelectionOptions<dynamic>","comment":"<p>The options to use for this selection model.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"popupMatchInputWidth","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the popup width is at least as wide as the select width.</p>\n","classPath":"angular_components/lib/mixins/material_dropdown_base.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"preferredPositions","bindingAlias":null,"type":"List<dynamic>","comment":"<p>Preferred positions for alignment when enforceSpaceConstraints is true</p>\n","classPath":"angular_components/lib/mixins/material_dropdown_base.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"raised","bindingAlias":null,"type":"bool","comment":"<p>Whether the button is raised.</p>\n","classPath":"angular_components/lib/mixins/button_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"selection","bindingAlias":null,"type":"SelectionModel<dynamic>","comment":"<p>The selection model this component controls.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"showButtonBorder","bindingAlias":null,"type":"bool","comment":"<p>Whether to show the bottom border of the dropdown button.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"slide","bindingAlias":null,"type":"String","comment":"<p>Direction of popup scaling.</p>\n<p>Valid values are <code>x</code>, <code>y</code>, or <code>null</code>.</p>\n","classPath":"angular_components/lib/mixins/material_dropdown_base.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"trackLayoutChanges","bindingAlias":null,"type":"bool","comment":"<p>Sets whether the suggestion list scrolls with the input box.</p>\n<p>This is a pass through property, as defined in <code>PopupInterface</code>.</p>\n","classPath":"angular_components/lib/mixins/track_layout_changes.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"visible","bindingAlias":null,"type":"bool","comment":"<p>Whether the dropdown is visible.</p>\n","classPath":"angular_components/lib/mixins/material_dropdown_base.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"width","bindingAlias":null,"type":"dynamic","comment":"<p>Width of the dropdown/list, default none, valid values are 0-5.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[{"annotation":"Output","name":"blur","bindingAlias":null,"type":"Stream<FocusEvent>","comment":"<p>Event that fires when the dropdown button is blurred.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"focus","bindingAlias":null,"type":"Stream<FocusEvent>","comment":"<p>Event that fires when the dropdown button is focused.</p>\n","classPath":"angular_components/lib/material_select/material_dropdown_select.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"visibleStream","bindingAlias":"visibleChange","type":"Stream<bool>","comment":"<p>Fired when the dropdown's visibility changes.</p>\n","classPath":"angular_components/lib/mixins/material_dropdown_base.dart","deprecated":false,"deprecatedMessage":null}]},{"name":"DropdownButtonComponent","selector":"dropdown-button","exportAs":null,"path":"angular_components/lib/material_select/dropdown_button.dart","comment":"<p>A button styled specifically for dropdowns.</p>\n<p>By default, this button is rendered with a triangle icon and an underline.\nThe component itself does not have a popup itself but can be used to build\ndropdowns that are not provided. Use <code>material-dropdown-select</code> for a\ncomponent that has the same button style, and implements the dropdown\nitself.</p>\n","inputs":[{"annotation":"Input","name":"ariaActiveDescendant","bindingAlias":null,"type":"String","comment":"<p>The id of the active element of the dropdown.</p>\n","classPath":"angular_components/lib/material_select/dropdown_button.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"ariaExpanded","bindingAlias":null,"type":"bool","comment":"<p>True if the dropdown is expanded.</p>\n","classPath":"angular_components/lib/material_select/dropdown_button.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"ariaLabelledBy","bindingAlias":null,"type":"String","comment":"<p>The id of an element that additionally describes the button.</p>\n<p>For example, a text element that says \"results per page\" for a dropdown\nwith numerical options.</p>\n","classPath":"angular_components/lib/material_select/dropdown_button.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"ariaOwns","bindingAlias":null,"type":"String","comment":"<p>The id of the content of the dropdown.</p>\n","classPath":"angular_components/lib/material_select/dropdown_button.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"buttonAriaLabel","bindingAlias":null,"type":"String","comment":"<p>Aria label for the button.</p>\n","classPath":"angular_components/lib/mixins/button_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"buttonText","bindingAlias":null,"type":"String","comment":"<p>Text on the button.</p>\n","classPath":"angular_components/lib/mixins/button_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"disabled","bindingAlias":null,"type":"bool","comment":"<p>Whether the button is disabled.</p>\n","classPath":"angular_components/lib/mixins/button_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"error","bindingAlias":null,"type":"String","comment":"<p>An error displayed below the button.</p>\n<p>The button also gets a red underline when this is set.</p>\n","classPath":"angular_components/lib/material_select/dropdown_button.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"icon","bindingAlias":null,"type":"Icon","comment":"<p>Icon to be used with the button. (Optional)</p>\n","classPath":"angular_components/lib/mixins/button_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"iconName","bindingAlias":null,"type":"String","comment":"<p>Icon to use for the button.</p>\n<p>See <code>MaterialIconComponent</code> for possible values.</p>\n","classPath":"angular_components/lib/mixins/button_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"popupType","bindingAlias":null,"type":"String","comment":"<p>The value for aria-haspopup.</p>\n<p>See <a href=\"https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup\">https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup</a> for valid values.</p>\n","classPath":"angular_components/lib/material_select/dropdown_button.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"raised","bindingAlias":null,"type":"bool","comment":"<p>Whether the button is raised.</p>\n","classPath":"angular_components/lib/mixins/button_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"role","bindingAlias":null,"type":"String","comment":"<p>The ARIA role of the dropdown button.</p>\n","classPath":"angular_components/lib/material_select/dropdown_button.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"showButtonBorder","bindingAlias":null,"type":"bool","comment":"<p>Whether to show the bottom border of the dropdown button.</p>\n","classPath":"angular_components/lib/material_select/dropdown_button.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[{"annotation":"Output","name":"onBlur","bindingAlias":"blur","type":"Stream<FocusEvent>","comment":"<p>Event that fires when the dropdown button is blurred.</p>\n","classPath":"angular_components/lib/material_select/dropdown_button.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"onFocus","bindingAlias":"focus","type":"Stream<FocusEvent>","comment":"<p>Event when the element is focused.</p>\n","classPath":"angular_components/lib/mixins/focusable_mixin.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"trigger","bindingAlias":null,"type":"Stream<UIEvent>","comment":"<p>Event fired when the button is clicked or keyboard activated.</p>\n","classPath":"angular_components/lib/material_select/dropdown_button.dart","deprecated":false,"deprecatedMessage":null}]},{"name":"displayNameRendererDirective","selector":"[displayNameRenderer]","exportAs":null,"path":"angular_components/lib/material_select/display_name.dart","comment":"<p>Add this directive to any <code>SelectionContainer</code> or <code>SelectionItem</code>\ncomponent to render <code>HasUIDisplayName</code> objects.</p>\n","inputs":null,"outputs":null}],"demos":[{"type":"MaterialSelectDemoComponent","name":"MaterialSelectDemoComponent","selector":"material-select-demo","asset":"material_select_example|lib/material_select_demo.dart"},{"type":"MaterialDropdownSelectDemoComponent","name":"MaterialDropdownSelectDemoComponent","selector":"material-dropdown-select-demo","asset":"material_select_example|lib/material_dropdown_select_demo.dart"}],"benchmarks":["material_select_item_init","material_select_init","material_dropdown_select_init"],"benchmarkPrefix":null,"owners":null,"uxOwners":null,"relatedUrls":null,"showGeneratedDocs":true}]