[{"displayName":"Material Input","docs":[{"name":"MaterialInputComponent","selector":"material-input:not(material-input[multiline])","path":"angular_components/lib/material_input/material_input.dart","comment":"<p><code>material-input</code> is a single- or multi-line text field where user can enter\ninput. It can optionally have a label.\nNOTE: Clients must declare materialInputDirectives in their directives list\ninstead of MaterialInputComponent.</p>\n<p><strong>Example usage:</strong></p>\n<pre><code>@Component(\n  selector: 'my-component',\n  template: '''\n    &lt;material-input label=\"Your Name\"&gt;&lt;/material-input&gt;\n    &lt;material-input multiline label=\"Enter multiple lines here\"&gt;\n    &lt;/material-input&gt;\n    &lt;material-input [(ngModel)]=\"text\"&gt;&lt;/material-input&gt;\n  ''',\n  directives: [materialInputDirectives]\n)\nclass MyComponent {}\n</code></pre>\n<p><strong>Attributes:</strong></p><ul><li><code>type</code> -- The type of the input. Defaults to \"text\". Other supported\nvalues are \"email\", \"password\", \"url\", \"number\", \"tel\", and \"search\".\n(Inputs of type \"number\" also use <code>materialNumberInputDirectives</code>)</li><li><code>multiple</code> -- Whether the user can enter multiple values, separated by\ncommas. This attribute only applies when type = \"email\", otherwise it is\nignored.</li><li><code>role</code> -- The role attribute for the input element.</li></ul>\n<p><strong>Inputs:</strong></p><ul><li><code>error</code> -- The error to be shown on the input. Has a higher precedent than\nall other errors.</li><li><code>errorMsg</code> -- The error msg to be shown on the input if the max characters\nare hit.</li><li><code>multiline: bool</code> -- Whether or not the input supports multiple lines.</li><li><code>label: String</code> -- The label to give the input. This is the default text\nthat shows up if nothing's entered into the text box.</li><li><code>floatingLabel: bool</code> -- Whether or not the label \"floats\". If false, the\nlabel disappears when text is entered into the box. If true, it instead\n\"floats\" up above the input.</li><li><code>hintText: String</code> -- The hint to be shown on the input. This text will\n not be displayed if there is an error message on the input.</li><li><code>showHintOnlyOnFocus: bool</code> -- Whether or not the hint text will be\n displayed when the input is not focused. Defaults to false.</li><li><code>required: bool</code> -- Whether or not the input is required. If there's no\ninput text, a required input will show a validation error when it's first\nfocused.</li><li><code>disabled: bool</code> -- Whether or not the input is disabled (readonly).\nDisabled inputs are grayed out and have a dashed underline.</li><li><code>maxCount: int</code> -- The maximum length of the input.</li><li>DEPRECATED: <code>checkValid: ValidityCheck</code> -- A custom validation function.\nThis function should take in the input text, and return a string\ncontaining an error message, or <code>null</code> if the input is valid. Note: With\nOnPush the validator will not be run on each digest. It is important for\nthe function to change whenever state of the validation function changes.</li><li><code>rightAlign: bool</code> -- Whether or not the input text should be\nright-aligned. Defaults to false.</li><li><code>characterCounter: CharacterCounter</code> -- A custom character counter\nfunction. Takes in the input text; returns how many characters the text\nshould be considered as.</li><li><code>leadingText: String</code> -- Any text to show at the leading edge of the\ninput -- e.g. a currency symbol or similar.</li><li><code>trailingText: String</code> -- Any text to show at the trailing edge of the\ninput -- e.g. a currency symbol or similar.</li><li><code>leadingGlyph: String</code> -- Any symbol to show at the leading edge of the\ninput -- e.g. a URL link icon or similar.</li><li><code>trailingGlyph: String</code> -- Any symbol to show at the trailing edge of the\ninput -- e.g. a URL link icon or similar.</li><li><code>displayBottomPanel: bool</code> -- Whether to display error, hint text, and\ncharacter counter panel.</li><li><code>rows</code> -- If the input is multiline, how many lines there are.</li><li><code>maxRows</code> -- If the input is multiline, the max number of lines.</li><li><code>showCharacterCount</code> -- Force the character count to be displayed if\nmaxCount is null.</li><li><code>inputAriaLabel</code> -- A label for the input for use by assistive\ntechnologies.</li><li><code>inputAriaOwns</code> -- The ID of an element which should be assigned to the\ninput element's aria-owns attribute.</li><li><code>inputAriaActivedescendent</code> -- The ID of an element which should be\nassigned to the input element's aria-activedescendant attribute.</li><li><code>inputAriaHasPopup</code> -- The value for the input element's aria-haspopup\nattribute, indicating that the element referred to by inputAriaOwns is\nexpandable.</li><li><code>inputAriaExpanded</code> -- Whether or not the expandable element referred to\nby <code>inputAriaOwns</code> is currently visible.</li><li><code>inputAriaAutocomplete</code> -- The autocomplete method applied to the inner\ninput element.</li></ul>\n<p><strong>Outputs:</strong></p><ul><li><code>inputKeyPress: String</code> -- Fired when the input text changes -- i.e., on\nevery keypress.</li><li><code>change: String</code> -- Publishes the input text whenever a conceptual \"change\nevent\" happens -- i.e., when the input loses focus, or when the user hits\nenter.</li><li><code>focus: FocusEvent</code> -- Fired when the input is focused.</li><li><code>blur: FocusEvent</code> -- Fired when this input loses focus.</li></ul>\n","inputs":[{"annotation":"Input","name":"characterCounter","bindingAlias":null,"type":"(String) → int","comment":"","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"checkValid","bindingAlias":null,"type":"(String) → String","comment":"","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":true,"deprecatedMessage":"Use angular2 forms API instead"},{"annotation":"Input","name":"disabled","bindingAlias":null,"type":"bool","comment":"","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"displayBottomPanel","bindingAlias":null,"type":"bool","comment":"<p>Display error message and character counter below the input.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"error","bindingAlias":null,"type":"String","comment":"","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"errorMsg","bindingAlias":null,"type":"String","comment":"","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"errorRenderer","bindingAlias":null,"type":"(Map<String, dynamic>) → Map<String, dynamic>","comment":"<p>A function which takes in an error map, and returns another map, replacing\nerrors with human readable text.</p>\n<p>WARNING: The API of this mechanism is still in flux and there will be\nbreaking changes. Be careful relying on it.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"floatingLabel","bindingAlias":null,"type":"bool","comment":"<p>The label will \"float\" above the text input instead of disappearing.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"hintText","bindingAlias":null,"type":"String","comment":"","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaActivedescendent","bindingAlias":null,"type":"String","comment":"<p>The id of an element which should be assigned to the inner input element's\naria-activedescendant attribute.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaAutocomplete","bindingAlias":null,"type":"String","comment":"<p>The autocomplete method applied to the inner input element.</p>\n<p>This can be used in conjunction with <code>inputRole</code> values of \"combobox\" or\n\"textbox\". If this is \"list\" or \"both\", <code>inputAriaHasPopup</code> should be\nset to \"true\".</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaExpanded","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the expandable element referred to by <code>inputAriaOwns</code> is\ncurrently visible.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaHasPopup","bindingAlias":null,"type":"String","comment":"<p>The value for the input element's aria-haspopup attribute.</p>\n<p>If the element referred to by <code>inputAriaOwns</code> is expandable, this should\nbe either \"true\" or the role of the owned element.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaLabel","bindingAlias":null,"type":"String","comment":"<p>The label to be used for screen readers. Use <code>label</code> instead of this\nwhen a visible label is desired.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaOwns","bindingAlias":null,"type":"String","comment":"<p>The id of an element which should be assigned to the inner input element's\naria-owns attribute.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"label","bindingAlias":null,"type":"String","comment":"<p>The label for this input. It disappears when user inputs text.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"leadingGlyph","bindingAlias":null,"type":"String","comment":"<p>Any persistent glyph to show before the input box.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"leadingText","bindingAlias":null,"type":"String","comment":"","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"maxCount","bindingAlias":null,"type":"int","comment":"<p>Maximum allowed characters for character counting input box.</p>\n<p>Character count always is displayed when the value is non-null.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"required","bindingAlias":null,"type":"bool","comment":"","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"requiredErrorMsg","bindingAlias":null,"type":"String","comment":"","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"rightAlign","bindingAlias":null,"type":"bool","comment":"","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"showCharacterCount","bindingAlias":null,"type":"bool","comment":"<p>Display character count even if maxCount is null.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"showHintOnlyOnFocus","bindingAlias":null,"type":"bool","comment":"","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"trailingGlyph","bindingAlias":null,"type":"String","comment":"<p>Any persistent glyph to show after the input box.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"trailingText","bindingAlias":null,"type":"String","comment":"","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[{"annotation":"Output","name":"onBlur","bindingAlias":"blur","type":"Stream<FocusEvent>","comment":"<p>Publishes events when a blur event is fired.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"onChange","bindingAlias":"change","type":"Stream<String>","comment":"<p>Publishes events when a change event is fired. (On enter, or on blur.)</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"onFocus","bindingAlias":"focus","type":"Stream<FocusEvent>","comment":"<p>Event when the element is focused.</p>\n","classPath":"angular_components/lib/mixins/focusable_mixin.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"onKeypress","bindingAlias":"inputKeyPress","type":"Stream<String>","comment":"<p>Publishes events whenever input text changes (each keypress).</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null}]}],"demos":[{"type":"MaterialInputDemoComponent","name":"MaterialInputDemoComponent","selector":"material-input-demo","asset":"material_input_example|lib/material_input_demo.dart"},{"type":"MaterialAutoSuggestInputDemoComponent","name":"MaterialAutoSuggestInputDemoComponent","selector":"material-auto-suggest-input-demo","asset":"material_input_example|lib/material_auto_suggest_input_demo.dart"},{"type":"MaterialPercentInputDemoComponent","name":"MaterialPercentInputDemoComponent","selector":"material-percent-input-demo","asset":"material_input_example|lib/material_percent_input_demo.dart"},{"type":"MaterialInputMixinDemoComponent","name":"MaterialInputMixinDemoComponent","selector":"material-input-mixins","asset":"material_input_example|lib/material_input_mixins.dart"},{"type":"MaterialInputNumberValueAccessorDemoComponent","name":"MaterialInputNumberValueAccessorDemoComponent","selector":"material-input-number-value-accessor-demo","asset":"material_input_example|lib/material_input_number_value_accessor_demo.dart"}],"benchmarks":["material_auto_suggest_input_init","material_auto_suggest_input_100_init","material_input_init","material_number_input_init"],"benchmarkPrefix":null,"owners":null,"uxOwners":null,"relatedUrls":null,"showGeneratedDocs":false}]