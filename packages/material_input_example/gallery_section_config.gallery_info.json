[{"displayName":"Material Input","docs":[{"name":"MaterialInputComponent","selector":"material-input:not(material-input[multiline])","exportAs":null,"path":"angular_components/lib/material_input/material_input.dart","comment":"<p><code>material-input</code> is a single- or multi-line text field where user can enter\ninput. It can optionally have a label.\nNOTE: Clients must declare materialInputDirectives in their directives list\ninstead of MaterialInputComponent.</p>\n<p><strong>Attributes:</strong></p><ul><li><code>type</code> -- The type of the input. Defaults to \"text\". Other supported\nvalues are \"email\", \"password\", \"url\", \"number\", \"tel\", and \"search\".\n(Inputs of type \"number\" also use <code>materialNumberInputDirectives</code>)</li><li><code>multiple</code> -- Whether the user can enter multiple values, separated by\ncommas. This attribute only applies when type = \"email\", otherwise it is\nignored.</li><li><code>role</code> -- The role attribute for the input element.</li></ul>\n","inputs":[{"annotation":"Input","name":"characterCounter","bindingAlias":null,"type":"(String) → int","comment":"<p>A custom character counter function.</p>\n<p>Takes in the input text; returns how many characters the text should be\nconsidered as.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"checkValid","bindingAlias":null,"type":"(String) → String","comment":"","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":true,"deprecatedMessage":"Use angular2 forms API instead"},{"annotation":"Input","name":"disabled","bindingAlias":null,"type":"bool","comment":"<p>Whether or not this input is disabled (readonly input.)</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"displayBottomPanel","bindingAlias":null,"type":"bool","comment":"<p>Whether to display error, hint text, and character counter panel.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"error","bindingAlias":null,"type":"String","comment":"<p>Error to be displayed.</p>\n<p>Higher precendent than all other errors which may be on this input.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"errorMsg","bindingAlias":null,"type":"String","comment":"<p>The error msg to be shown on the input if it has more than <code>maxCount</code>\ncharacters.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"errorRenderer","bindingAlias":null,"type":"(Map<String, dynamic>) → Map<String, dynamic>","comment":"<p>A function which takes in an error map, and returns another map, replacing\nerrors with human readable text.</p>\n<p>WARNING: The API of this mechanism is still in flux and there will be\nbreaking changes. Be careful relying on it.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"floatingLabel","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the label \"floats\".</p>\n<p>If false, the label disappears when text is entered into the box. If true,\nit instead \"floats\" up above the input.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"hintText","bindingAlias":null,"type":"String","comment":"<p>The hint to be shown on the input.</p>\n<p>This text will not be displayed if there is an error message on the input.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaActivedescendent","bindingAlias":null,"type":"String","comment":"<p>The ID of an element which should be assigned to the inner input element's\naria-activedescendant attribute.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaAutocomplete","bindingAlias":null,"type":"String","comment":"<p>The autocomplete method applied to the inner input element.</p>\n<p>This can be used in conjunction with <code>inputRole</code> values of \"combobox\" or\n\"textbox\". If this is \"list\" or \"both\", <code>inputAriaHasPopup</code> should be\nset to \"true\".</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaExpanded","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the expandable element referred to by <code>inputAriaOwns</code> is\ncurrently visible.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaHasPopup","bindingAlias":null,"type":"String","comment":"<p>The value for the input element's aria-haspopup attribute, indicating that\nthe element referred to by inputAriaOwns is expandable.</p>\n<p>If the element referred to by <code>inputAriaOwns</code> is expandable, this should\nbe either \"true\" or the role of the owned element.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaLabel","bindingAlias":null,"type":"String","comment":"<p>The label to be used for assistive technologies.</p>\n<p>Use <code>label</code> instead of this when a visible label is desired.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaOwns","bindingAlias":null,"type":"String","comment":"<p>The ID of an element which should be assigned to the inner input element's\naria-owns attribute.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"label","bindingAlias":null,"type":"String","comment":"<p>The label for this input.</p>\n<p>This is the default text that shows up if nothing's entered into the text\nbox. It disappears when user inputs text.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"leadingGlyph","bindingAlias":null,"type":"String","comment":"<p>Any symbol to show at the leading edge of the input -- e.g. a URL link\nicon or similar.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"leadingGlyphAriaLabel","bindingAlias":null,"type":"String","comment":"<p>Aria label used for the leading glyph.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"leadingText","bindingAlias":null,"type":"String","comment":"<p>Any text to show at the leading edge of the input -- e.g. a currency\nsymbol or similar.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"maxCount","bindingAlias":null,"type":"int","comment":"<p>Maximum allowed characters for character counting input box.</p>\n<p>Character count always is displayed when the value is non-null.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"required","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the input is required.</p>\n<p>If there's no input text, a required input will show a validation error\nwhen it's first blured.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"requiredErrorMsg","bindingAlias":null,"type":"String","comment":"<p>Custom error message to show when the field is required and blank.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"rightAlign","bindingAlias":null,"type":"bool","comment":"<p>Whether the input contents should be always right aligned.</p>\n<p>Default value is <code>false</code>.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"showCharacterCount","bindingAlias":null,"type":"bool","comment":"<p>Display character count even if maxCount is null.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"showHintOnlyOnFocus","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the hint text will be displayed when the input is not\nfocused.</p>\n<p>Defaults to false.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"trailingGlyph","bindingAlias":null,"type":"String","comment":"<p>Any symbol to show at the trailing edge of the input -- e.g. a URL link\nicon or similar.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"trailingGlyphAriaLabel","bindingAlias":null,"type":"String","comment":"<p>Aria label used for the trailing glyph.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"trailingText","bindingAlias":null,"type":"String","comment":"<p>Any text to show at the trailing edge of the input -- e.g. a currency\nsymbol or similar.</p>\n","classPath":"angular_components/lib/material_input/material_input.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[{"annotation":"Output","name":"onBlur","bindingAlias":"blur","type":"Stream<FocusEvent>","comment":"<p>Publishes events when a blur event is fired.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"onChange","bindingAlias":"change","type":"Stream<String>","comment":"<p>Publishes events when a change event is fired. (On enter, or on blur.)</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"onFocus","bindingAlias":"focus","type":"Stream<FocusEvent>","comment":"<p>Event when the element is focused.</p>\n","classPath":"angular_components/lib/mixins/focusable_mixin.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"onKeypress","bindingAlias":"inputKeyPress","type":"Stream<String>","comment":"<p>Publishes events whenever input text changes (each keypress).</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null}]},{"name":"MaterialMultilineInputComponent","selector":"material-input[multiline]","exportAs":null,"path":"angular_components/lib/material_input/material_input_multiline.dart","comment":"<p><code>material-input</code> is a multi-line text field where user can enter\ninput, and can optionally have a label.</p>\n","inputs":[{"annotation":"Input","name":"characterCounter","bindingAlias":null,"type":"(String) → int","comment":"<p>A custom character counter function.</p>\n<p>Takes in the input text; returns how many characters the text should be\nconsidered as.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"checkValid","bindingAlias":null,"type":"(String) → String","comment":"","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":true,"deprecatedMessage":"Use angular2 forms API instead"},{"annotation":"Input","name":"disabled","bindingAlias":null,"type":"bool","comment":"<p>Whether or not this input is disabled (readonly input.)</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"displayBottomPanel","bindingAlias":null,"type":"bool","comment":"<p>Whether to display error, hint text, and character counter panel.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"error","bindingAlias":null,"type":"String","comment":"<p>Error to be displayed.</p>\n<p>Higher precendent than all other errors which may be on this input.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"errorMsg","bindingAlias":null,"type":"String","comment":"<p>The error msg to be shown on the input if it has more than <code>maxCount</code>\ncharacters.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"errorRenderer","bindingAlias":null,"type":"(Map<String, dynamic>) → Map<String, dynamic>","comment":"<p>A function which takes in an error map, and returns another map, replacing\nerrors with human readable text.</p>\n<p>WARNING: The API of this mechanism is still in flux and there will be\nbreaking changes. Be careful relying on it.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"floatingLabel","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the label \"floats\".</p>\n<p>If false, the label disappears when text is entered into the box. If true,\nit instead \"floats\" up above the input.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"hintText","bindingAlias":null,"type":"String","comment":"<p>The hint to be shown on the input.</p>\n<p>This text will not be displayed if there is an error message on the input.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputAriaLabel","bindingAlias":null,"type":"String","comment":"<p>The label to be used for assistive technologies.</p>\n<p>Use <code>label</code> instead of this when a visible label is desired.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"label","bindingAlias":null,"type":"String","comment":"<p>The label for this input.</p>\n<p>This is the default text that shows up if nothing's entered into the text\nbox. It disappears when user inputs text.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"maxCount","bindingAlias":null,"type":"int","comment":"<p>Maximum allowed characters for character counting input box.</p>\n<p>Character count always is displayed when the value is non-null.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"maxRows","bindingAlias":null,"type":"int","comment":"<p>Maximum number of lines to display.</p>\n<p>Anything more than the <code>maxRows</code> will cause the input to scroll.</p>\n","classPath":"angular_components/lib/material_input/material_input_multiline.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"required","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the input is required.</p>\n<p>If there's no input text, a required input will show a validation error\nwhen it's first blured.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"requiredErrorMsg","bindingAlias":null,"type":"String","comment":"<p>Custom error message to show when the field is required and blank.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"rows","bindingAlias":null,"type":"int","comment":"<p>How many rows the multiline input should have.</p>\n<p>Can either be an integer, or a string.</p>\n","classPath":"angular_components/lib/material_input/material_input_multiline.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"showCharacterCount","bindingAlias":null,"type":"bool","comment":"<p>Display character count even if maxCount is null.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"showHintOnlyOnFocus","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the hint text will be displayed when the input is not\nfocused.</p>\n<p>Defaults to false.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[{"annotation":"Output","name":"onBlur","bindingAlias":"blur","type":"Stream<FocusEvent>","comment":"<p>Publishes events when a blur event is fired.</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"onChange","bindingAlias":"change","type":"Stream<String>","comment":"<p>Publishes events when a change event is fired. (On enter, or on blur.)</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"onFocus","bindingAlias":"focus","type":"Stream<FocusEvent>","comment":"<p>Event when the element is focused.</p>\n","classPath":"angular_components/lib/mixins/focusable_mixin.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"onKeypress","bindingAlias":"inputKeyPress","type":"Stream<String>","comment":"<p>Publishes events whenever input text changes (each keypress).</p>\n","classPath":"angular_components/lib/material_input/base_material_input.dart","deprecated":false,"deprecatedMessage":null}]},{"name":"MaterialAutoSuggestInputComponent","selector":"material-auto-suggest-input","exportAs":null,"path":"angular_components/lib/material_input/material_auto_suggest_input.dart","comment":"<p><code>material-auto-suggest-input</code> is an input field which provides the\nsuggestions to auto-complete the input as the user types.</p>\n<p>The caller of this component has to provide the list of initial/unfiltered\nsuggestions which are filtered by component as user types. The filter is\ncase insensitive.</p>\n<p>Supports async suggestions through the <code>ObserveAware</code> interface implemented\nby <code>SelectionOptions</code>.</p>\n<p>The popup suggestion list has a max height and auto overflow. We can add a\nproperty for custom max height once there's a use case.</p>\n","inputs":[{"annotation":"Input","name":"ariaLabel","bindingAlias":null,"type":"String","comment":"<p>The label to use for assistive technology.</p>\n<p>If not provided, uses the label instead.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"characterCounter","bindingAlias":null,"type":"Function","comment":"<p>A custom character counter function.</p>\n<p>Takes in the input text; returns how many characters the text should be\nconsidered as.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"checkValid","bindingAlias":null,"type":"Function","comment":"","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":true,"deprecatedMessage":"Use forms API instead"},{"annotation":"Input","name":"clearIconTooltip","bindingAlias":null,"type":"String","comment":"<p>Tooltip shown on clear icon.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"closeOnActivate","bindingAlias":null,"type":"bool","comment":"<p>Whether to cause dropdown to be closed on activation.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"closeOnEnter","bindingAlias":null,"type":"bool","comment":"<p>Whether to close on enter even for string non matching options.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"componentRenderer","bindingAlias":null,"type":"(dynamic) → Type","comment":"","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":true,"deprecatedMessage":"Use factoryRenderer instead as it is tree shakeable."},{"annotation":"Input","name":"constrainToViewport","bindingAlias":null,"type":"bool","comment":"<p>Whether to clamp the popup position so that it never goes offscreen.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"disabled","bindingAlias":null,"type":"bool","comment":"<p>Whether this input is disabled.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"displayBottomPanel","bindingAlias":null,"type":"bool","comment":"<p>Whether to display error, hint text, and character counter panel.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"emptyPlaceholder","bindingAlias":null,"type":"String","comment":"<p>Text to show if the options list is empty and not loading.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"enforceSpaceConstraints","bindingAlias":null,"type":"bool","comment":"<p>Whether the popup should automatically reposition itself based on space\navailable relative to the viewport.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"error","bindingAlias":null,"type":"String","comment":"<p>Error to be displayed.</p>\n<p>Higher precendent than all other errors which may be on this input.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"factoryRenderer","bindingAlias":null,"type":"(dynamic) → ComponentFactory<dynamic>","comment":"<p><code>FactoryRenderer</code> used to display the item.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"filterSuggestions","bindingAlias":null,"type":"bool","comment":"<p>Allow filtering of suggestions as the user is typing.</p>\n<p>When <code>false</code> always show the full list of suggestions.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"floatingLabel","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the label \"floats\".</p>\n<p>If false, the label disappears when text is entered into the box. If true,\nit instead \"floats\" up above the input.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"hideCheckbox","bindingAlias":null,"type":"bool","comment":"<p>Whether to hide the checkbox before the selection item for multi-select.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"highlightMatchFromStartOfWord","bindingAlias":null,"type":"bool","comment":"<p>Whether matches should only highlight at the start of words.</p>\n","classPath":"angular_components/lib/mixins/highlight_assistant_mixin.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"highlightOptions","bindingAlias":null,"type":"bool","comment":"<p>Whether to highlight options.\nDefault value is <code>true</code>.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"hintText","bindingAlias":null,"type":"String","comment":"<p>The hint to be shown on the input.</p>\n<p>This text will not be displayed if there is an error message on the input.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"initialActivateSelection","bindingAlias":null,"type":"bool","comment":"<p>The first suggestion in the popup is active and highlighted by default.\nSetting this to true changes behavior so that when <code>options</code> or\n<code>selection</code> are changed:</p><ol><li>first selected value in <code>selection</code> is active in <code>options</code></li><li>if <code>selection</code> has no selected values, nothing is active in <code>options</code></li></ol>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"inputText","bindingAlias":null,"type":"String","comment":"<p>The text the input should have.</p>\n<p>Consider using the angular_forms <code>NgModel</code> instead.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"itemRenderer","bindingAlias":null,"type":"(dynamic) → String","comment":"<p>A simple function to render the an item to string.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"label","bindingAlias":null,"type":"String","comment":"<p>The label to use on the input.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"labelFactory","bindingAlias":null,"type":"(dynamic) → ComponentFactory<dynamic>","comment":"<p>Custom factory for rendering suggestion labels.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"labelRenderer","bindingAlias":null,"type":"(dynamic) → Type","comment":"","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":true,"deprecatedMessage":"Use labelFactory instead."},{"annotation":"Input","name":"leadingGlyph","bindingAlias":null,"type":"String","comment":"<p>Any persistent glyph to show before the input box.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"leadingText","bindingAlias":null,"type":"String","comment":"<p>Any text to show at the leading edge of the input -- e.g. a currency\nsymbol or similar.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"limit","bindingAlias":null,"type":"dynamic","comment":"<p>How many suggestions to show.</p>\n<p>If the limit is less than 1, it is assumed to be mean no limit.\nSee filter method in <code>Filterable</code>. Defaults to 10.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"loading","bindingAlias":null,"type":"bool","comment":"<p>When turned on and no suggestions available, show loading indicator in the\nsuggestions dropdown.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"maxCount","bindingAlias":null,"type":"int","comment":"<p>Maximum allowed characters for character counting input box.</p>\n<p>Character count always is displayed when the value is non-null.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"optionHighlighter","bindingAlias":null,"type":"(String, dynamic) → List<HighlightedTextSegment>","comment":"<p>Function which returns a list of <code>HighlightedTextSegment</code> for the given\nquery and value.</p>\n<p>If no <code>optionHighlighter</code> is provided, a <code>TextHighlighter</code> is used in\nconjunction with the <code>itemRenderer</code> to produce the list of text segments.</p>\n","classPath":"angular_components/lib/mixins/highlight_assistant_mixin.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"options","bindingAlias":"selectionOptions","type":"SelectionOptions<dynamic>","comment":"<p>The available options for this container.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"popupMatchInputWidth","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the suggestion popup width is at least as wide as the input\nwidth.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"popupPositions","bindingAlias":null,"type":"List<RelativePosition>","comment":"<p>List of positions to try and draw the suggest popup.</p>\n<p>See <code>MaterialPopupComponent</code> for more information.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"popupShadowCssClass","bindingAlias":null,"type":"String","comment":"<p>A custom CSS class for suggestion popup contents.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"required","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the input is required.</p>\n<p>If there's no input text, a required input will show a validation error\nwhen it's first blured.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"requiredErrorMsg","bindingAlias":null,"type":"String","comment":"<p>Custom error message to show when the field is required and blank.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"rightAlign","bindingAlias":null,"type":"bool","comment":"<p>Whether the input contents should be always right aligned.</p>\n<p>Default value is <code>false</code>.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"selection","bindingAlias":null,"type":"SelectionModel<dynamic>","comment":"<p>If set, auto suggest will use the supplied observable <code>SelectionModel</code>\nobject.</p>\n<p>Uses a single selection model by default.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"shouldClearOnSelection","bindingAlias":null,"type":"bool","comment":"<p>Whether to clear the text once the item is selected from the menu.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"showClearIcon","bindingAlias":null,"type":"bool","comment":"<p>Show or hide the trailing close icon.</p>\n<p>Clicking on the icon clears the input text and hides the popup.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"showHintOnlyOnFocus","bindingAlias":null,"type":"bool","comment":"<p>Whether or not the hint text will be displayed when the input is not\nfocused.</p>\n<p>Defaults to false.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"showPopup","bindingAlias":null,"type":"bool","comment":"<p>Used to control the visibility of the suggestion popup.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"slide","bindingAlias":null,"type":"String","comment":"<p>Direction of popup scaling.</p>\n<p>Valid values are <code>x</code>, <code>y</code>, or <code>null</code>.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"sorted","bindingAlias":null,"type":"bool","comment":"","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":true,"deprecatedMessage":"Caller should call .sort() on the options instead."},{"annotation":"Input","name":"suggestions","bindingAlias":null,"type":"List<dynamic>","comment":"","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":true,"deprecatedMessage":"Use [options] instead"},{"annotation":"Input","name":"trailingGlyph","bindingAlias":null,"type":"String","comment":"<p>Any persistent glyph to show at the end of the input box.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"trailingText","bindingAlias":null,"type":"String","comment":"<p>Any text to show at the trailing edge of the input -- e.g. a currency\nsymbol or similar.</p>\n","classPath":"angular_components/lib/material_input/input_wrapper.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[{"annotation":"Output","name":"onBlur","bindingAlias":"blur","type":"Stream<void>","comment":"<p>Fired when the input gains blur or auto suggest item get selected.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"onClear","bindingAlias":"clear","type":"Stream<void>","comment":"<p>Fired when the close icon is clicked.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"onFocus","bindingAlias":"focus","type":"Stream<FocusEvent>","comment":"<p>Fired when the input gains focus</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"showPopupChange","bindingAlias":null,"type":"Stream<bool>","comment":"<p>Publishes event when the showPopup changes.</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Output","name":"textChanged","bindingAlias":"inputTextChange","type":"Stream<String>","comment":"<p>Publishes events when input text changes (on keypress.)</p>\n","classPath":"angular_components/lib/material_input/material_auto_suggest_input.dart","deprecated":false,"deprecatedMessage":null}]},{"name":"MaterialNumberValueAccessor","selector":"material-input[type=number],material-input[type=percent]","exportAs":null,"path":"angular_components/lib/material_input/material_number_accessor.dart","comment":"<p><code>ControlValueAccessor</code> which will coerce an input into a <code>num</code>.</p>\n<p>Use <code>materialNumberInputDirectives</code> to get a set of directives to use with\nthe input to provide validations. Such as the default to ensure it is a\nnumber, <code>checkInteger</code>, <code>checkPositive</code>, <code>checkNonNegative</code> (allows 0,)\n<code>lowerBound</code>, and <code>upperBound</code>.</p>\n<p>Accessor always sets the raw <code>String</code> value that is set from the input, but\nonly sets the value of a <code>Control</code> if the input could be parsed.</p>\n<p><code>keypressUpdate</code> attribute has the value update on every keypress while\nthe default is the value only updating on a blur event.\n<code>blurFormat</code> attribute causes the input to be formatted on blur events.</p>\n","inputs":[],"outputs":[]},{"name":"MaterialPercentInputDirective","selector":"material-input[type=percent]","exportAs":null,"path":"angular_components/lib/material_input/material_percent_directive.dart","comment":"<p>Directive to control <code>material-input</code> to accept percentage values.</p>\n","inputs":[{"annotation":"Input","name":"percentErrorRenderer","bindingAlias":null,"type":"Function","comment":"<p>Function that allows clients to use their own error messages instead of\nthe default.</p>\n","classPath":"angular_components/lib/material_input/material_percent_directive.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[]}],"demos":[{"type":"MaterialInputDemoComponent","name":"MaterialInputDemoComponent","selector":"material-input-demo","asset":"material_input_example|lib/material_input_demo.dart"},{"type":"MaterialAutoSuggestInputDemoComponent","name":"MaterialAutoSuggestInputDemoComponent","selector":"material-auto-suggest-input-demo","asset":"material_input_example|lib/material_auto_suggest_input_demo.dart"},{"type":"MaterialPercentInputDemoComponent","name":"MaterialPercentInputDemoComponent","selector":"material-percent-input-demo","asset":"material_input_example|lib/material_percent_input_demo.dart"},{"type":"MaterialInputMixinDemoComponent","name":"MaterialInputMixinDemoComponent","selector":"material-input-mixins","asset":"material_input_example|lib/material_input_mixins.dart"},{"type":"MaterialInputNumberValueAccessorDemoComponent","name":"MaterialInputNumberValueAccessorDemoComponent","selector":"material-input-number-value-accessor-demo","asset":"material_input_example|lib/material_input_number_value_accessor_demo.dart"}],"benchmarks":["material_auto_suggest_input_init","material_auto_suggest_input_100_init","material_input_init","material_number_input_init"],"benchmarkPrefix":null,"owners":null,"uxOwners":null,"relatedUrls":null,"showGeneratedDocs":true}]